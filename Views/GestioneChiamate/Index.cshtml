@model WebApplicationCentralino.Models.Chiamata
@{
    ViewData["Title"] = "Gestione Chiamate";    
    var chiamate = ViewBag.Chiamate as List<WebApplicationCentralino.Models.Chiamata>;

}


<h2>@ViewData["Title"]</h2>

<div class="alert alert-info">
    Inserire sia Numero e Ragione Sociale sia per il chiamante che per il chiamato.
</div>

<form asp-action="Salva" method="post" id="formChiamata">
    
@if (Model.Id > 0)
{        
    <input type = "hidden" asp-for = "Id" />
}

<div class="row">
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="NumeroChiamante" class="form-label">Numero Chiamante</label>
            <select asp-for="NumeroChiamante" class="form-select select2" asp-items="@(ViewBag.Contatti as List<SelectListItem>)">
                <option value="">Seleziona o inserisci un numero</option>
            </select>
            <span asp-validation-for="NumeroChiamante" class="text-danger"></span>
        </div>
    </div>
    <div class="col-md-6">
            <div class="mb-3">
                <label asp-for="RagioneSocialeChiamante" class="form-label">Ragione Sociale Chiamante</label>
                <select asp-for="RagioneSocialeChiamante" class="form-select select2" asp-items="@(ViewBag.RagioniSociali as List<SelectListItem>)">
                    <option value="">Seleziona o inserisci una ragione sociale</option>
                </select>
                <span asp-validation-for="RagioneSocialeChiamante" class="text-danger"></span>
            </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="NumeroChiamato" class="form-label">Numero Chiamato</label>
            <select asp-for="NumeroChiamato" class="form-select select2" asp-items="@(ViewBag.Contatti as List<SelectListItem>)">
                <option value="">Seleziona o inserisci un numero</option>
            </select>
            <span asp-validation-for="NumeroChiamato" class="text-danger"></span>
        </div>
    </div>
    <div class="col-md-6">
            <div class="mb-3">
                <label asp-for="RagioneSocialeChiamato" class="form-label">Ragione Sociale Chiamato</label>
                <select asp-for="RagioneSocialeChiamato" class="form-select select2" asp-items="@(ViewBag.RagioniSociali as List<SelectListItem>)">
                    <option value="">Seleziona o inserisci una ragione sociale</option>
                </select>
                <span asp-validation-for="RagioneSocialeChiamato" class="text-danger"></span>
            </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="DataArrivoChiamata" class="form-label">Data Arrivo</label>
            <input asp-for="DataArrivoChiamata" class="form-control" type="datetime-local" step="1" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="DataFineChiamata" class="form-label">Data Fine</label>
            <input asp-for="DataFineChiamata" class="form-control" type="datetime-local" step="1" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <div class="mb-3">
            <label asp-for="TipoChiamata" class="form-label">Tipologia Linea</label>
            <select asp-for="TipoChiamata" class="form-select" data-bs-toggle="tooltip" data-bs-placement="right" 
                    title="Entrata: chiamata ricevuta da un numero esterno all'azienda&#10;Uscita: chiamata effettuata dall'interno verso l'esterno dell'azienda">
                <option value="Entrata">Entrata</option>
                <option value="Uscita">Uscita</option>
            </select>
        </div>
    </div>
    <div class="col-md-6">
            <div class="mb-3">
                <label for="LocazionePredefinita" class="form-label">Locazione</label>
                @{
                    var comuniList = ViewBag.Comuni as List<SelectListItem>;
                }

                <select id="LocazionePredefinita" name="LocazionePredefinita" class="form-select">
                    <option value="">Seleziona una locazione</option>
                    @if (comuniList != null)
                    {
                        foreach (var comune in comuniList)
                        {
                            var isSelected = Model?.Locazione == comune.Value;
                            <option value="@comune.Value" selected="@(isSelected ? "selected" : null)">
                                @comune.Text
                            </option>
                        }
                    }

                    <option value="Altro" selected="@(Model?.Locazione != null && (comuniList == null || !comuniList.Any(c => c.Value == Model.Locazione)) ? "selected" : null)">
                        Altro
                    </option>
                </select>

            </div>

            <div class="mb-3" id="DivLocazioneManuale" style="display:none;">
                <label for="Locazione" class="form-label">Inserisci manualmente la locazione</label>
                <input asp-for="Locazione" class="form-control" readonly />
                <small class="form-text text-muted">Suggerimento: utilizzare il formato "Comune di [Nome Comune]" (es. "Comune di Roccalumera")</small>
            </div>

    </div>
</div>

<input type="hidden" asp-for="UniqueID" />
<button type="submit" class="btn btn-success">Salva</button>
<a asp-controller="Chiamate" asp-action="Index" class="btn btn-secondary">Annulla</a>

    
@if (!ViewData.ModelState.IsValid)
{        
    <div class = "alert alert-danger mt-3">
        <div asp-validation-summary = "All" class = "text-danger"></div>
    </div>  
}

</form>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        @if (!string.IsNullOrEmpty(TempData["msg"] as string))
        {
            @Html.Raw(TempData["msg"])
        }

            // Visualizza messaggi di avviso per contatti incompleti
        @if (TempData["AvvisoChiamante"] != null)
        {
            <text>
                            showToast("Avviso chiamante", "@TempData["AvvisoChiamante"]", "warning");
            </text>
        }

        @if (TempData["AvvisoChiamato"] != null)
        {
            <text>
                            showToast("Avviso chiamato", "@TempData["AvvisoChiamato"]", "warning");
            </text>
        }

        @if (TempData["InfoMessage"] != null)
        {
            <text>
                            showToast("Informazione", "@TempData["InfoMessage"]", "info");
            </text>
        }

        const contatti = @Html.Raw(ViewBag.ContattiJson ?? "[]");

        function aggiornaRagioneSociale(selectNumeroId, selectRagioneId) {
            const numero = document.getElementById(selectNumeroId).value;
            const contatto = contatti.find(c => c.numeroContatto === numero);
            if (contatto) {
                document.getElementById(selectRagioneId).value = contatto.ragioneSociale;
            }
        }

        function aggiornaNumero(selectRagioneId, selectNumeroId) {
            const ragione = document.getElementById(selectRagioneId).value;
            const contatto = contatti.find(c => c.ragioneSociale === ragione);
            if (contatto) {
                document.getElementById(selectNumeroId).value = contatto.numeroContatto;
            }
        }

        function editCall(id, numChiamante, numChiamato, ragSocChiamante, ragSocChiamato,
                        dataArrivo, dataFine, tipo, locazione, uniqueID) {

            console.log("Locazione ricevuta:", locazione);

            document.getElementById("Id").value = id;
            document.getElementById("NumeroChiamante").value = numChiamante;
            document.getElementById("NumeroChiamato").value = numChiamato;
            document.getElementById("RagioneSocialeChiamante").value = ragSocChiamante;
            document.getElementById("RagioneSocialeChiamato").value = ragSocChiamato;
            document.getElementById("DataArrivoChiamata").value = dataArrivo;
            document.getElementById("DataFineChiamata").value = dataFine;
            document.getElementById("TipoChiamata").value = tipo;
            document.getElementById("Locazione").value = locazione;
            document.getElementById("UniqueID").value = uniqueID;

            document.querySelector('h2').scrollIntoView({ behavior: 'smooth' });
        }

                // Funzione per formattare la data nel formato corretto per input datetime-local
        // senza problemi di timezone
        function formatDateTimeForInput(date) {
            const pad = num => num.toString().padStart(2, '0');
            return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}:${pad(date.getSeconds())}`;
        }

        function parseLocalDateTime(inputValue) {
            const [datePart, timePart] = inputValue.split("T");
            const [year, month, day] = datePart.split("-").map(Number);
            const [hour, minute] = timePart.split(":").map(Number);
            return new Date(year, month - 1, day, hour, minute);
        }

        // Funzione per validare le date
        function validateDates() {
            const now = new Date();
            const dataArrivoInput = document.getElementById("DataArrivoChiamata");
            const dataFineInput = document.getElementById("DataFineChiamata");

            // Crea date locali senza problemi di timezone
            let dataArrivo = dataArrivoInput.value ? parseLocalDateTime(dataArrivoInput.value) : new Date();
            let dataFine = dataFineInput.value ? parseLocalDateTime(dataFineInput.value) : new Date(dataArrivo.getTime() + 5 * 60000);

            // Controllo che le date non siano nel futuro
            if (dataArrivo > now) {
                alert("La data di arrivo non può essere nel futuro. Verrà impostata alla data e ora corrente.");
                dataArrivo = new Date();
                dataArrivoInput.value = formatDateTimeForInput(dataArrivo);
                return false;
            }

            if (dataFine > now) {
                alert("La data di fine non può essere nel futuro. Verrà impostata alla data e ora corrente.");
                dataFine = new Date();
                dataFineInput.value = formatDateTimeForInput(dataFine);
                return false;
            }

            // Controllo che data fine sia successiva a data arrivo
            if (dataFine < dataArrivo) {
                alert("La data di fine deve essere successiva alla data di arrivo. Verrà impostata a 5 minuti dopo la data di arrivo.");
                dataFine = new Date(dataArrivo.getTime() + 5 * 60000);
                dataFineInput.value = formatDateTimeForInput(dataFine);
                return false;
            }

            return true;
        }

        // Funzione per mostrare toast
        function showToast(title, message, type) {
            // Puoi usare la libreria di toast che preferisci (es. Toastr, Bootstrap Toast)
            // Esempio con Toastr:
            if (typeof toastr !== 'undefined') {
                toastr.options = {
                    "closeButton": true,
                    "positionClass": "toast-top-right",
                    "timeOut": "10000"
                };

                switch(type) {
                    case "warning":
                        toastr.warning(message, title);
                        break;
                    case "info":
                        toastr.info(message, title);
                        break;
                    case "success":
                        toastr.success(message, title);
                        break;
                    case "error":
                        toastr.error(message, title);
                        break;
                    default:
                        toastr.info(message, title);
                }
            } else {
                // Fallback se Toastr non è disponibile
                alert(title + ": " + message);
            }
        }

        // Funzione per gestire la verifica del contatto
        function handleContactVerification(result, fieldPrefix) {
            if (!result.isValid) {
                if (result.isIncompleto) {
                    // Chiedi all'utente se vuole completare il contatto
                    if (confirm(result.messaggioAvviso + "\nVuoi completare il contatto adesso?")) {
                        window.location.href = '@Url.Action("Index", "Contatti")';
                        return false;
                    }
                } else {
                    showToast("Errore " + fieldPrefix.toLowerCase(), result.messaggioAvviso, "error");
                    return false;
                }
            }
            return true;
        }

        // Funzione per gestire il numero mancante
        function handleMissingNumber(numero, fieldPrefix) {
            if (confirm("Il numero " + numero + " non è presente nella rubrica. Vuoi aggiungerlo adesso?")) {
                window.location.href = '@Url.Action("Index", "Contatti")';
                return false;
            }
            return true;
        }

        $(document).ready(function () {
            // Inizializza i tooltip di Bootstrap
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl, {
                    html: true
                })
            });

            const ddl = document.getElementById("LocazionePredefinita");
            const divManuale = document.getElementById("DivLocazioneManuale");
            const manualInput = document.getElementById("Locazione");

            function toggleManuale() {
                if (ddl.value === "Altro") {
                    divManuale.style.display = "block";
                    manualInput.removeAttribute("readonly");
                    manualInput.value = ""; // pulisci il campo se entri in manuale
                } else {
                    divManuale.style.display = "none";
                    manualInput.setAttribute("readonly", true);
                    manualInput.value = ddl.value; // imposta il valore scelto
                }
            }

            if (ddl) {
                ddl.addEventListener("change", toggleManuale);
                toggleManuale(); // inizializzazione
            }

            $('.select2').select2({
                placeholder: "Cerca o inserisci...",
                allowClear: true,
                width: '100%',
                tags: true, // Permette l'inserimento di valori liberi
                createTag: function(params) {
                    return {
                        id: params.term,
                        text: params.term,
                        newOption: true
                    }
                }
            });

            // Entrata
            $("#NumeroChiamante").on("change", () => aggiornaRagioneSociale("NumeroChiamante", "RagioneSocialeChiamante"));
            $("#RagioneSocialeChiamante").on("change", () => aggiornaNumero("RagioneSocialeChiamante", "NumeroChiamante"));

            // Uscita
            $("#NumeroChiamato").on("change", () => aggiornaRagioneSociale("NumeroChiamato", "RagioneSocialeChiamato"));
            $("#RagioneSocialeChiamato").on("change", () => aggiornaNumero("RagioneSocialeChiamato", "NumeroChiamato"));

            // Validazione date quando perdono il focus
            $("#DataArrivoChiamata, #DataFineChiamata").on("blur", function() {
                validateDates();
            });

            // Modifica la gestione della verifica dei contatti
            $("#NumeroChiamante, #RagioneSocialeChiamante, #NumeroChiamato, #RagioneSocialeChiamato").on("change", function() {
                var campo = $(this).attr("id");
                var fieldPrefix = campo.includes("Chiamante") ? "Chiamante" : "Chiamato";
                var numero = $("#Numero" + fieldPrefix).val();
                var ragioneSociale = $("#RagioneSociale" + fieldPrefix).val();

                // Effettua una chiamata AJAX per verificare la corrispondenza
                $.ajax({
                    url: '@Url.Action("VerificaCorrispondenza", "GestioneChiamate")',
                    type: "GET",
                    data: { numero: numero, ragioneSociale: ragioneSociale },
                    success: function(result) {
                        if (!result.isValid) {
                            if (result.isIncompleto) {
                                // Chiedi all'utente se vuole completare il contatto
                                if (confirm(result.messaggioAvviso)) {
                                    window.location.href = '@Url.Action("Index", "Contatti")';
                                    return false;
                                } else {
                                    // Se l'utente non vuole completare il contatto, pulisci i campi
                                    $("#Numero" + fieldPrefix).val("").trigger("change");
                                    $("#RagioneSociale" + fieldPrefix).val("").trigger("change");
                                }
                            } else {
                                showToast("Errore " + fieldPrefix.toLowerCase(), result.messaggioAvviso, "error");
                                // Pulisci i campi in caso di errore
                                $("#Numero" + fieldPrefix).val("").trigger("change");
                                $("#RagioneSociale" + fieldPrefix).val("").trigger("change");
                            }
                        }
                    },
                    error: function() {
                        console.log("Errore durante la verifica della corrispondenza");
                    }
                });
            });

            // Modifica la validazione del form
            $("#formChiamata").on("submit", function(e) {
                e.preventDefault();
                
                // Verifica le date
                if (!validateDates()) {
                    return false;
                }

                // Verifica i contatti prima di procedere
                var numeroChiamante = $("#NumeroChiamante").val();
                var ragioneSocialeChiamante = $("#RagioneSocialeChiamante").val();
                var numeroChiamato = $("#NumeroChiamato").val();
                var ragioneSocialeChiamato = $("#RagioneSocialeChiamato").val();

                var verificaChiamante = $.Deferred();
                var verificaChiamato = $.Deferred();

                // Verifica chiamante
                if (numeroChiamante || ragioneSocialeChiamante) {
                    $.ajax({
                        url: '@Url.Action("VerificaCorrispondenza", "GestioneChiamate")',
                        type: "GET",
                        data: { numero: numeroChiamante, ragioneSociale: ragioneSocialeChiamante },
                        success: function(result) {
                            if (!result.isValid) {
                                if (result.isIncompleto) {
                                    if (confirm(result.messaggioAvviso)) {
                                        window.location.href = '@Url.Action("Index", "Contatti")';
                                        verificaChiamante.reject();
                                    } else {
                                        verificaChiamante.reject();
                                    }
                                } else {
                                    showToast("Errore chiamante", result.messaggioAvviso, "error");
                                    verificaChiamante.reject();
                                }
                            } else {
                                verificaChiamante.resolve();
                            }
                        }
                    });
                } else {
                    verificaChiamante.resolve();
                }

                // Verifica chiamato
                if (numeroChiamato || ragioneSocialeChiamato) {
                    $.ajax({
                        url: '@Url.Action("VerificaCorrispondenza", "GestioneChiamate")',
                        type: "GET",
                        data: { numero: numeroChiamato, ragioneSociale: ragioneSocialeChiamato },
                        success: function(result) {
                            if (!result.isValid) {
                                if (result.isIncompleto) {
                                    if (confirm(result.messaggioAvviso)) {
                                        window.location.href = '@Url.Action("Index", "Contatti")';
                                        verificaChiamato.reject();
                                    } else {
                                        verificaChiamato.reject();
                                    }
                                } else {
                                    showToast("Errore chiamato", result.messaggioAvviso, "error");
                                    verificaChiamato.reject();
                                }
                            } else {
                                verificaChiamato.resolve();
                            }
                        }
                    });
                } else {
                    verificaChiamato.resolve();
                }

                // Procedi con il submit solo se entrambe le verifiche sono passate
                $.when(verificaChiamante, verificaChiamato).then(
                    function() {
                        // Entrambe le verifiche sono passate, procedi con il submit
                        e.target.submit();
                    },
                    function() {
                        // Almeno una verifica è fallita
                        return false;
                    }
                );
            });

            $("#btnAnnulla").on("click", function (e) {
                e.preventDefault();
                $("#Id").val("0");
                $("#NumeroChiamante").val("").trigger("change");
                $("#NumeroChiamato").val("").trigger("change");
                $("#RagioneSocialeChiamante").val("").trigger("change");
                $("#RagioneSocialeChiamato").val("").trigger("change");

                // Imposta le date correnti quando si annulla
                const now = new Date();
                const endDate = new Date(now.getTime() + 5 * 60000); // 5 minuti dopo

                $("#DataArrivoChiamata").val(formatDateTimeForInput(now));
                $("#DataFineChiamata").val(formatDateTimeForInput(endDate));

                $("#TipoChiamata").val("Uscita");
                $("#Locazione").val("");
                $("#UniqueID").val(crypto.randomUUID());

                $("#sezioneElencoChiamate")[0].scrollIntoView({ behavior: 'smooth' });
            });
        });
    </script>
}
