@model WebApplicationCentralino.Models.DetailedCallStatistics
@{
    ViewData["Title"] = "Statistiche Dettagliate";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    
    <style>
        /* Stili per la visualizzazione responsive delle tabelle */
        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
        
        /* Stili per le celle della tabella */
        .table td, .table th {
            padding: 0.5rem;
        }
        
        /* Stili per il testo lungo nelle celle */
        .table td {
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        /* Stili specifici per la colonna ragione sociale */
        .table td.ragione-sociale {
            white-space: normal;
            min-width: 200px;
            max-width: none;
            word-wrap: break-word;
        }
        
        /* Stili per i badge */
        .badge {
            white-space: nowrap;
        }
        
        /* Stili per i bottoni delle azioni */
        .btn-group {
            white-space: nowrap;
        }
        
        .btn-group .btn {
            padding: 0.25rem 0.5rem;
        }
        
        /* Stili per le tabelle nelle statistiche */
        .stats-table {
            width: 100%;
            margin-bottom: 1rem;
        }
        
        .stats-table th {
            background-color: #f8f9fa;
            position: sticky;
            top: 0;
            z-index: 1;
        }
        
        /* Stili per la visualizzazione su dispositivi mobili */
        @@media (max-width: 768px) {
            .table-responsive {
                margin-bottom: 1rem;
            }
            
            .stats-table th,
            .stats-table td {
                font-size: 0.9rem;
            }
            
            .table td.ragione-sociale {
                min-width: 150px;
            }
        }

        .sortable {
            cursor: pointer;
            user-select: none;
        }
        .sortable:hover {
            background-color: #f8f9fa;
        }
        .sortable i {
            margin-left: 5px;
        }
        .sortable.asc i.fa-sort-up,
        .sortable.desc i.fa-sort-down {
            display: inline-block;
        }
        .sortable i.fa-sort {
            display: inline-block;
        }
        .sortable.asc i.fa-sort,
        .sortable.desc i.fa-sort {
            display: none;
        }
    </style>
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Statistiche Dettagliate</h2>
        <a id="exportButton" href="@Url.Action("ExportStatistics", "Home", new { 
            dateFrom = ViewBag.DateFrom, 
            dateTo = ViewBag.DateTo, 
            includeInterni = ViewBag.IncludeInterni, 
            comune = ViewBag.SelectedComune, 
            searchContatto = ViewBag.SearchContatto != null && ViewBag.SearchContatto.Contains("|") ? ViewBag.SearchContatto.Split('|')[0] : ViewBag.SearchContatto 
        })" class="btn btn-success">
            <i class="bi bi-file-earmark-arrow-down"></i> Esporta Excel
        </a>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Filtri</h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3" id="filterForm">
                <div class="col-12 col-md-3">
                    <label for="dateFrom" class="form-label">Data da:</label>
                    <input type="date" id="dateFrom" name="dateFrom" class="form-control" min="2020-01-01" value="@ViewBag.DateFrom">
                </div>
                <div class="col-12 col-md-3">
                    <label for="dateTo" class="form-label">Data a:</label>
                    <input type="date" id="dateTo" name="dateTo" class="form-control" min="2020-01-01" value="@ViewBag.DateTo">
                </div>

                <div class="col-12 col-md-3">
                    <label for="includeInterni" class="form-label">Includi chiamate interne:</label>
                    <select id="includeInterni" name="includeInterni" class="form-select">
                        @if (ViewBag.IncludeInterni == false)
                        {
                            <option value="false" selected>No</option>
                            <option value="true">Sì</option>
                        }
                        else
                        {
                            <option value="false">No</option>
                            <option value="true" selected>Sì</option>
                        }
                    </select>
                </div>

                <div class="col-12 col-md-3" id="comuneContainer">
                    <label for="comune" class="form-label">Comune:</label>
                    <select id="comune" name="comune" class="form-control select2">
                        <option value="">Seleziona un comune</option>
                        @foreach (var comune in ViewBag.Comuni ?? new List<string>())
                        {
                            <option value="@comune" selected="@(ViewBag.SelectedComune == comune)">@comune</option>
                        }
                    </select>
                </div>

                <div class="col-12" id="searchContainer">
                    <label for="searchContatto" class="form-label">Cerca contatto:</label>
                    <select id="searchContatto" name="searchContatto" class="form-control" style="width: 100%;">
                        @if (!string.IsNullOrEmpty(ViewBag.SearchContatto))
                        {
                            <option value="@ViewBag.SearchContatto" selected>@ViewBag.SearchContatto</option>
                        }
                    </select>
                </div>

                <div class="col-12">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-filter"></i> Applica Filtri
                    </button>
                    <a href="@Url.Action("StatisticheDettagliate")" class="btn btn-secondary">
                        <i class="bi bi-x-circle"></i> Reset Filtri
                    </a>
                </div>
            </form>
        </div>
    </div>

    <!-- Riepilogo Generale -->
    <div class="row mb-4">
        <div class="col-6 col-md-3 mb-3">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Totale Chiamate</h5>
                    <h2 class="card-text">@Model.TotaleChiamate</h2>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3 mb-3">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Durata Media</h5>
                    <h2 class="card-text">@FormatDuration(Model.DurataMediaChiamate)</h2>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3 mb-3">
            <div class="card bg-info text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Chiamate Manuali</h5>
                    <h2 class="card-text">@Model.ChiamateManuali</h2>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3 mb-3">
            <div class="card bg-secondary text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Chiamate Automatiche</h5>
                    <h2 class="card-text">@Model.ChiamateAutomatiche</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Nuovi pannelli per le statistiche di durata -->
    <div class="row mb-4">
        <div class="col-6 col-md-3 mb-3">
            <div class="card bg-warning text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Durata Media In Entrata</h5>
                    <h2 class="card-text">@FormatDuration(Model.DurataMediaInEntrata)</h2>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3 mb-3">
            <div class="card bg-danger text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Durata Media In Uscita</h5>
                    <h2 class="card-text">@FormatDuration(Model.DurataMediaInUscita)</h2>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3 mb-3">
            <div class="card bg-warning text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Durata Totale In Entrata</h5>
                    <h2 class="card-text">@FormatDuration(Model.DurataTotaleInEntrata)</h2>
                </div>
            </div>
        </div>
        <div class="col-6 col-md-3 mb-3">
            <div class="card bg-danger text-white h-100">
                <div class="card-body">
                    <h5 class="card-title">Durata Totale In Uscita</h5>
                    <h2 class="card-text">@FormatDuration(Model.DurataTotaleInUscita)</h2>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(ViewBag.SearchContatto))
    {
        <!-- Statistiche del Contatto -->
        <div class="card shadow mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    Statistiche del Contatto: 
                    @if (ViewBag.SearchContatto.Contains("|"))
                    {
                        var parts = ViewBag.SearchContatto.Split('|');
                        <span>@parts[0] - @parts[1]</span>
                    }
                    else
                    {
                        <span>@ViewBag.SearchContatto</span>
                    }
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <h5 class="card-title">Chiamate in Entrata</h5>
                                <h2 class="card-text">@Model.ChiamateInEntrata</h2>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <h5 class="card-title">Chiamate in Uscita</h5>
                                <h2 class="card-text">@Model.ChiamateInUscita</h2>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <h5 class="card-title">Durata Totale</h5>
                                <h2 class="card-text">@FormatDuration(Model.DurataTotaleChiamate)</h2>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <h5 class="card-title">Durata Media</h5>
                                <h2 class="card-text">@FormatDuration(Model.DurataMediaChiamate)</h2>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Distribuzione Chiamate -->
    <div class="row mb-4">
        <div class="col-12 col-md-4 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Distribuzione per Tipo</h5>
                </div>
                <div class="card-body">
                    <div style="height: 300px;">
                        <canvas id="tipoChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-4 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Distribuzione per Locazione</h5>
                </div>
                <div class="card-body">
                    <div style="height: 300px;">
                        <canvas id="locazioneChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-4 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Andamento Giornaliero</h5>
                </div>
                <div class="card-body">
                    <div style="height: 300px;">
                        <canvas id="giornoChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Top Chiamanti e Chiamati -->
    <div class="row mb-4">
        <div class="col-12 col-md-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Top Chiamanti</h5>
                    <div class="d-flex align-items-center">
                        <select id="topChiamantiCount" class="form-select form-select-sm me-2" style="width: auto;">
                            <option value="10">Top 10</option>
                            <option value="15">Top 15</option>
                            <option value="20">Top 20</option>
                            <option value="50">Top 50</option>
                            <option value="100">Top 100</option>
                            <option value="0">Tutti</option>
                        </select>
                        <div id="topChiamantiPagination" class="pagination pagination-sm mb-0">
                            <!-- La paginazione verrà inserita qui dinamicamente -->
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th class="sortable" data-sort="numero">Numero <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="ragioneSociale">Ragione Sociale <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="numeroChiamate">N° Chiamate <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="durataTotale">Durata Totale <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="durataMedia">Durata Media <i class="fas fa-sort"></i></th>
                                </tr>
                            </thead>
                            <tbody id="topChiamantiBody">
                                @foreach (var chiamante in Model.TopChiamanti)
                                {
                                    <tr>
                                        <td>@chiamante.Numero</td>
                                        <td class="ragione-sociale">@chiamante.RagioneSociale</td>
                                        <td>@chiamante.NumeroChiamate</td>
                                        <td>@FormatDuration(chiamante.DurataTotale)</td>
                                        <td>@FormatDuration(chiamante.DurataMedia)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Top Chiamati</h5>
                    <div class="d-flex align-items-center">
                        <select id="topChiamatiCount" class="form-select form-select-sm me-2" style="width: auto;">
                            <option value="10">Top 10</option>
                            <option value="15">Top 15</option>
                            <option value="20">Top 20</option>
                            <option value="50">Top 50</option>
                            <option value="100">Top 100</option>
                            <option value="0">Tutti</option>
                        </select>
                        <div id="topChiamatiPagination" class="pagination pagination-sm mb-0">
                            <!-- La paginazione verrà inserita qui dinamicamente -->
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th class="sortable" data-sort="numero">Numero <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="ragioneSociale">Ragione Sociale <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="numeroChiamate">N° Chiamate <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="durataTotale">Durata Totale <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="durataMedia">Durata Media <i class="fas fa-sort"></i></th>
                                </tr>
                            </thead>
                            <tbody id="topChiamatiBody">
                                @foreach (var chiamato in Model.TopChiamati)
                                {
                                    <tr>
                                        <td>@chiamato.Numero</td>
                                        <td class="ragione-sociale">@chiamato.RagioneSociale</td>
                                        <td>@chiamato.NumeroChiamate</td>
                                        <td>@FormatDuration(chiamato.DurataTotale)</td>
                                        <td>@FormatDuration(chiamato.DurataMedia)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(ViewBag.SearchContatto))
    {
        <!-- Grafici Contatto -->
        <div class="row mb-4">
            <div class="col-md-6">
                <div class="card shadow h-100">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Andamento Giornaliero</h5>
                    </div>
                    <div class="card-body">
                        <div style="height: 300px;">
                            <canvas id="contattoGiornoChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card shadow h-100">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Distribuzione Oraria</h5>
                    </div>
                    <div class="card-body">
                        <div style="height: 300px;">
                            <canvas id="contattoOraChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Nuove statistiche basate sulla locazione -->
    <div class="row mb-4">
        <div class="col-12 col-md-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Top Chiamanti per Locazione</h5>
                    <div class="d-flex align-items-center">
                        <select id="topChiamantiLocazioneCount" class="form-select form-select-sm me-2" style="width: auto;">
                            <option value="10">Top 10</option>
                            <option value="15">Top 15</option>
                            <option value="20">Top 20</option>
                            <option value="50">Top 50</option>
                            <option value="100">Top 100</option>
                            <option value="0">Tutti</option>
                        </select>
                        <div id="topChiamantiLocazionePagination" class="pagination pagination-sm mb-0">
                            <!-- La paginazione verrà inserita qui dinamicamente -->
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th class="sortable" data-sort="numero">Numero <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="ragioneSociale">Ragione Sociale <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="locazione">Locazione <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="numeroChiamate">N° Chiamate <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="durataTotale">Durata Totale <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="durataMedia">Durata Media <i class="fas fa-sort"></i></th>
                                </tr>
                            </thead>
                            <tbody id="topChiamantiLocazioneBody">
                                @foreach (var chiamante in Model.TopChiamantiPerLocazione)
                                {
                                    <tr>
                                        <td>@chiamante.Numero</td>
                                        <td class="ragione-sociale">@chiamante.RagioneSociale</td>
                                        <td>@chiamante.Locazione</td>
                                        <td>@chiamante.NumeroChiamate</td>
                                        <td>@FormatDuration(chiamante.DurataTotale)</td>
                                        <td>@FormatDuration(chiamante.DurataMedia)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Top Chiamati per Locazione</h5>
                    <div class="d-flex align-items-center">
                        <select id="topChiamatiLocazioneCount" class="form-select form-select-sm me-2" style="width: auto;">
                            <option value="10">Top 10</option>
                            <option value="15">Top 15</option>
                            <option value="20">Top 20</option>
                            <option value="50">Top 50</option>
                            <option value="100">Top 100</option>
                            <option value="0">Tutti</option>
                        </select>
                        <div id="topChiamatiLocazionePagination" class="pagination pagination-sm mb-0">
                            <!-- La paginazione verrà inserita qui dinamicamente -->
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th class="sortable" data-sort="numero">Numero <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="ragioneSociale">Ragione Sociale <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="locazione">Locazione <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="numeroChiamate">N° Chiamate <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="durataTotale">Durata Totale <i class="fas fa-sort"></i></th>
                                    <th class="sortable" data-sort="durataMedia">Durata Media <i class="fas fa-sort"></i></th>
                                </tr>
                            </thead>
                            <tbody id="topChiamatiLocazioneBody">
                                @foreach (var chiamato in Model.TopChiamatiPerLocazione)
                                {
                                    <tr>
                                        <td>@chiamato.Numero</td>
                                        <td class="ragione-sociale">@chiamato.RagioneSociale</td>
                                        <td>@chiamato.Locazione</td>
                                        <td>@chiamato.NumeroChiamate</td>
                                        <td>@FormatDuration(chiamato.DurataTotale)</td>
                                        <td>@FormatDuration(chiamato.DurataMedia)</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Grafici per distribuzione locazione -->
    <div class="row mb-4">
        <div class="col-12 col-md-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Distribuzione per Locazione Chiamante</h5>
                </div>
                <div class="card-body">
                    <div style="height: 300px;">
                        <canvas id="locazioneChiamanteChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6 mb-4">
            <div class="card shadow h-100">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Distribuzione per Locazione Chiamato</h5>
                </div>
                <div class="card-body">
                    <div style="height: 300px;">
                        <canvas id="locazioneChiamatoChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal per contatto non trovato -->
<div class="modal fade" id="contattoNonTrovatoModal" tabindex="-1" aria-labelledby="contattoNonTrovatoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title" id="contattoNonTrovatoModalLabel">Contatto non trovato</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Il contatto cercato non è stato trovato. Vuoi cercarlo nella rubrica?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No, rimani qui</button>
                <a href="@Url.Action("Index", "Contatti")" class="btn btn-primary">Sì, vai alla rubrica</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        $(document).ready(function() {
            // Funzione per gestire date non valide
            function fixInvalidDate(input) {
                if (!input.value) return;

                const parts = input.value.split("-");
                if (parts.length !== 3) return;

                let year = parseInt(parts[0], 10);
                const currentYear = new Date().getFullYear();

                if (isNaN(year) || year < 2020) {
                    parts[0] = currentYear;
                    input.value = parts.join("-");
                }
            }

            // Aggiungi event listeners per i campi data
            $('#dateFrom, #dateTo').on('change blur', function() {
                fixInvalidDate(this);
            });

            // Initialize Select2 for comune dropdown
            $('.select2').select2({
                theme: 'bootstrap-5',
                width: '100%',
                dropdownParent: $('#comuneContainer'),
                placeholder: 'Seleziona un comune',
                allowClear: true
            });

            // Gestione della visibilità dei campi di ricerca
            let isUpdating = false;
            function toggleSearchFields() {
                if (isUpdating) return;
                isUpdating = true;

                const comune = $('#comune').val();
                const searchText = $('#searchContatto').val();

                if (comune) {
                    $('#searchContainer').hide();
                    $('#searchContatto').val('').trigger('change');
                } else if (searchText) {
                    $('#comuneContainer').hide();
                    $('#comune').val('').trigger('change');
                } else {
                    $('#searchContainer').show();
                    $('#comuneContainer').show();
                }

                isUpdating = false;
            }

            // Inizializza lo stato dei campi
            toggleSearchFields();

            // Gestisci i cambiamenti nei campi
            $('#comune').on('change', function() {
                toggleSearchFields();
            });

            $('#searchContatto').on('change', function() {
                toggleSearchFields();
            });

            // Gestione del form submit
            $('#filterForm').on('submit', function(e) {
                const comune = $('#comune').val();
                const searchText = $('#searchContatto').val();

                // Se c'è un termine di ricerca, verifica se ci sono risultati
                if (searchText) {
                    e.preventDefault();
                    
                    // Se searchText contiene il separatore "|", significa che è un identificatore completo
                    // In questo caso, non serve verificare perché è già un contatto valido
                    if (searchText.includes('|')) {
                        $('#filterForm')[0].submit();
                        return;
                    }
                    
                    // Altrimenti, verifica se ci sono risultati
                    $.get('@Url.Action("VerificaContatto", "Home")', { searchContatto: searchText })
                        .done(function(response) {
                            if (response.results && response.results.length > 0) {
                                $('#filterForm')[0].submit();
                            } else {
                                $('#contattoNonTrovatoModal').modal('show');
                            }
                        });
                }
            });

            // Dati per i grafici
            const tipoData = {
                labels: @Html.Raw(Json.Serialize(Model.ChiamatePerTipo.Keys)),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.ChiamatePerTipo.Values)),
                    backgroundColor: [
                        '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b'
                    ]
                }]
            };

            // Calcola le percentuali per tutte le chiamate
            const totalCalls = @Model.TotaleChiamate;
            const incomingCalls = @Model.ChiamateInEntrata;
            const outgoingCalls = @Model.ChiamateInUscita;
            
            // Calcola le percentuali
            const incomingPercentage = ((incomingCalls / totalCalls) * 100).toFixed(1);
            const outgoingPercentage = ((outgoingCalls / totalCalls) * 100).toFixed(1);

            // Aggiorna le etichette con le percentuali per chiamate in entrata e uscita
            tipoData.labels = tipoData.labels.map(label => {
                if (label === 'In Entrata') return `In Entrata (${incomingPercentage}%)`;
                if (label === 'In Uscita') return `In Uscita (${outgoingPercentage}%)`;
                if (label === 'Interna') {
                    const internalCalls = @Model.ChiamateInterne;
                    const internalPercentage = ((internalCalls / totalCalls) * 100).toFixed(1);

                    if (internalPercentage > 0)
                        return `Interna (${internalPercentage}%)`;
                    else
                        return `Interna`;
                }
                return label;
            });

            const locazioneData = {
                labels: @Html.Raw(Json.Serialize(Model.ChiamatePerLocazione.Keys)),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.ChiamatePerLocazione.Values)),
                    backgroundColor: [
                        '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b'
                    ]
                }]
            };

            const giornoData = {
                labels: @Html.Raw(Json.Serialize(Model.ChiamatePerGiorno.Keys)),
                datasets: [{
                    label: 'Numero Chiamate',
                    data: @Html.Raw(Json.Serialize(Model.ChiamatePerGiorno.Values)),
                    borderColor: '#4e73df',
                    backgroundColor: 'rgba(78, 115, 223, 0.1)',
                    fill: true
                }]
            };

            // Configurazione dei grafici
            const tipoChart = new Chart(
                document.getElementById('tipoChart'),
                {
                    type: 'pie',
                    data: tipoData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: window.innerWidth < 768 ? 'bottom' : 'right',
                                labels: {
                                    boxWidth: 15,
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                }
                            }
                        }
                    }
                }
            );

            const locazioneChart = new Chart(
                document.getElementById('locazioneChart'),
                {
                    type: 'pie',
                    data: locazioneData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: window.innerWidth < 768 ? 'bottom' : 'right',
                                labels: {
                                    boxWidth: 15,
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                }
                            }
                        }
                    }
                }
            );

            const giornoChart = new Chart(
                document.getElementById('giornoChart'),
                {
                    type: 'line',
                    data: giornoData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1,
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                }
                            },
                            x: {
                                ticks: {
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                }
                            }
                        }
                    }
                }
            );

            // Nuovi grafici per la distribuzione per locazione
            const locazioneChiamanteData = {
                labels: @Html.Raw(Json.Serialize(Model.ChiamatePerLocazioneChiamante.Keys)),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.ChiamatePerLocazioneChiamante.Values)),
                    backgroundColor: [
                        '#28a745', '#20c997', '#17a2b8', '#ffc107', '#dc3545', '#6f42c1', '#fd7e14', '#e83e8c'
                    ]
                }]
            };

            const locazioneChiamatoData = {
                labels: @Html.Raw(Json.Serialize(Model.ChiamatePerLocazioneChiamato.Keys)),
                datasets: [{
                    data: @Html.Raw(Json.Serialize(Model.ChiamatePerLocazioneChiamato.Values)),
                    backgroundColor: [
                        '#28a745', '#20c997', '#17a2b8', '#ffc107', '#dc3545', '#6f42c1', '#fd7e14', '#e83e8c'
                    ]
                }]
            };

            const locazioneChiamanteChart = new Chart(
                document.getElementById('locazioneChiamanteChart'),
                {
                    type: 'pie',
                    data: locazioneChiamanteData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: window.innerWidth < 768 ? 'bottom' : 'right',
                                labels: {
                                    boxWidth: 15,
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                }
                            }
                        }
                    }
                }
            );

            const locazioneChiamatoChart = new Chart(
                document.getElementById('locazioneChiamatoChart'),
                {
                    type: 'pie',
                    data: locazioneChiamatoData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: window.innerWidth < 768 ? 'bottom' : 'right',
                                labels: {
                                    boxWidth: 15,
                                    font: {
                                        size: window.innerWidth < 768 ? 10 : 12
                                    }
                                }
                            }
                        }
                    }
                }
            );

            // Aggiorna i grafici quando la finestra viene ridimensionata
            window.addEventListener('resize', function() {
                tipoChart.options.plugins.legend.position = window.innerWidth < 768 ? 'bottom' : 'right';
                tipoChart.options.plugins.legend.labels.font.size = window.innerWidth < 768 ? 10 : 12;
                tipoChart.update();

                locazioneChart.options.plugins.legend.position = window.innerWidth < 768 ? 'bottom' : 'right';
                locazioneChart.options.plugins.legend.labels.font.size = window.innerWidth < 768 ? 10 : 12;
                locazioneChart.update();

                giornoChart.options.scales.y.ticks.font.size = window.innerWidth < 768 ? 10 : 12;
                giornoChart.options.scales.x.ticks.font.size = window.innerWidth < 768 ? 10 : 12;
                giornoChart.update();

                // Aggiorna i nuovi grafici per locazione
                locazioneChiamanteChart.options.plugins.legend.position = window.innerWidth < 768 ? 'bottom' : 'right';
                locazioneChiamanteChart.options.plugins.legend.labels.font.size = window.innerWidth < 768 ? 10 : 12;
                locazioneChiamanteChart.update();

                locazioneChiamatoChart.options.plugins.legend.position = window.innerWidth < 768 ? 'bottom' : 'right';
                locazioneChiamatoChart.options.plugins.legend.labels.font.size = window.innerWidth < 768 ? 10 : 12;
                locazioneChiamatoChart.update();
            });

            // Inizializza Select2 per il campo di ricerca contatto
            $('#searchContatto').select2({
                theme: 'bootstrap-5',
                placeholder: 'Cerca per numero o ragione sociale...',
                allowClear: true,
                minimumInputLength: 3,
                ajax: {
                    url: '@Url.Action("VerificaContatto")',
                    dataType: 'json',
                    delay: 250,
                    data: function(params) {
                        return {
                            searchContatto: params.term
                        };
                    },
                    processResults: function(data) {
                        return {
                            results: data.results
                        };
                    },
                    cache: true
                },
                language: {
                    searching: function() {
                        return "Ricerca in corso...";
                    },
                    noResults: function() {
                        return "Nessun risultato trovato";
                    },
                    inputTooShort: function() {
                        return "Inserisci almeno 3 caratteri";
                    }
                }
            });

            // Se c'è un valore iniziale, lo imposta
            @if (!string.IsNullOrEmpty(ViewBag.SearchContatto))
            {
                <text>
                var initialValue = '@ViewBag.SearchContatto';
                var $searchContatto = $('#searchContatto');
                
                // Se il valore iniziale contiene il separatore "|", significa che è un identificatore completo
                // In questo caso, dobbiamo ricostruire il testo per la visualizzazione
                if (initialValue.includes('|')) {
                    var parts = initialValue.split('|');
                    var displayText = parts[0] + ' - ' + (parts[1] || '');
                    var option = new Option(displayText, initialValue, true, true);
                    $searchContatto.append(option).trigger('change');
                } else {
                    // Per compatibilità con i valori esistenti
                    var option = new Option(initialValue, initialValue, true, true);
                    $searchContatto.append(option).trigger('change');
                }
                </text>
            }

            // Gestione del cambio del numero di risultati
            $('#topChiamantiCount').change(function() {
                currentChiamantiPage = 1;
                updateTopChiamanti(1);
            });

            $('#topChiamatiCount').change(function() {
                currentChiamatiPage = 1;
                updateTopChiamati(1);
            });

            // Variabili per tenere traccia dello stato di ordinamento per le nuove tabelle
            var currentChiamantiLocazioneSort = { field: 'numeroChiamate', direction: 'desc' };
            var currentChiamatiLocazioneSort = { field: 'numeroChiamate', direction: 'desc' };
            var currentChiamantiLocazionePage = 1;
            var currentChiamatiLocazionePage = 1;

            // Variabili per tenere traccia dello stato di ordinamento per le tabelle originali
            var currentChiamantiSort = { field: 'numeroChiamate', direction: 'desc' };
            var currentChiamatiSort = { field: 'numeroChiamate', direction: 'desc' };
            let currentChiamantiPage = 1;
            let currentChiamatiPage = 1;

            function updateTopChiamanti(page = 1) {
                var count = $('#topChiamantiCount').val();
                var searchContatto = '@ViewBag.SearchContatto';
                var dateFrom = '@ViewBag.DateFrom';
                var dateTo = '@ViewBag.DateTo';
                var comune = '@ViewBag.SelectedComune';
                var includeInterni = '@ViewBag.IncludeInterni';

                // Se searchContatto contiene il separatore "|", estrai solo la parte del numero
                if (searchContatto && searchContatto.includes('|')) {
                    searchContatto = searchContatto.split('|')[0];
                }

                // Se count è 0, significa "Tutti"
                if (count === "0") {
                    count = "999999"; // Un numero molto grande per ottenere tutti i risultati
                }

                $.get('@Url.Action("GetTopChiamanti")', {
                    searchContatto: searchContatto,
                    count: count,
                    page: page,
                    dateFrom: dateFrom,
                    dateTo: dateTo,
                    comune: comune,
                    includeInterni: includeInterni,
                    sortField: currentChiamantiSort.field,
                    sortDirection: currentChiamantiSort.direction
                })
                .done(function(response) {
                    if (response.error) {
                        console.error('Errore:', response.error);
                        return;
                    }

                    var tbody = $('#topChiamantiBody');
                    tbody.empty();
                    
                    if (response.data && Array.isArray(response.data)) {
                        response.data.forEach(function(chiamante) {
                            tbody.append(`
                                <tr>
                                    <td>${chiamante.numero || ''}</td>
                                    <td class="ragione-sociale">${chiamante.ragioneSociale || ''}</td>
                                    <td>${chiamante.numeroChiamate || 0}</td>
                                    <td>${formatDuration(chiamante.durataTotale || 0)}</td>
                                    <td>${formatDuration(chiamante.durataMedia || 0)}</td>
                                </tr>
                            `);
                        });

                        // Aggiorna la paginazione
                        updatePagination('topChiamantiPagination', response.totalPages || 1, page, function(newPage) {
                            currentChiamantiPage = newPage;
                            updateTopChiamanti(newPage);
                        });
                    } else {
                        console.error('Formato risposta non valido:', response);
                    }
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.error('Errore nella richiesta:', textStatus, errorThrown);
                });
            }

            function updateTopChiamati(page = 1) {
                var count = $('#topChiamatiCount').val();
                var searchContatto = '@ViewBag.SearchContatto';
                var dateFrom = '@ViewBag.DateFrom';
                var dateTo = '@ViewBag.DateTo';
                var comune = '@ViewBag.SelectedComune';
                var includeInterni = '@ViewBag.IncludeInterni';

                // Se searchContatto contiene il separatore "|", estrai solo la parte del numero
                if (searchContatto && searchContatto.includes('|')) {
                    searchContatto = searchContatto.split('|')[0];
                }

                // Se count è 0, significa "Tutti"
                if (count === "0") {
                    count = "999999"; // Un numero molto grande per ottenere tutti i risultati
                }

                $.get('@Url.Action("GetTopChiamati")', {
                    searchContatto: searchContatto,
                    count: count,
                    page: page,
                    dateFrom: dateFrom,
                    dateTo: dateTo,
                    comune: comune,
                    includeInterni: includeInterni,
                    sortField: currentChiamatiSort.field,
                    sortDirection: currentChiamatiSort.direction
                })
                .done(function(response) {
                    if (response.error) {
                        console.error('Errore:', response.error);
                        return;
                    }

                    var tbody = $('#topChiamatiBody');
                    tbody.empty();
                    
                    if (response.data && Array.isArray(response.data)) {
                        response.data.forEach(function(chiamato) {
                            tbody.append(`
                                <tr>
                                    <td>${chiamato.numero || ''}</td>
                                    <td class="ragione-sociale">${chiamato.ragioneSociale || ''}</td>
                                    <td>${chiamato.numeroChiamate || 0}</td>
                                    <td>${formatDuration(chiamato.durataTotale || 0)}</td>
                                    <td>${formatDuration(chiamato.durataMedia || 0)}</td>
                                </tr>
                            `);
                        });

                        // Aggiorna la paginazione
                        updatePagination('topChiamatiPagination', response.totalPages || 1, page, function(newPage) {
                            currentChiamatiPage = newPage;
                            updateTopChiamati(newPage);
                        });
                    } else {
                        console.error('Formato risposta non valido:', response);
                    }
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.error('Errore nella richiesta:', textStatus, errorThrown);
                });
            }

            function updatePagination(containerId, totalPages, currentPage, callback) {
                var container = $(`#${containerId}`);
                container.empty();

                if (totalPages <= 1) return;

                // Pulsante "Precedente"
                container.append(`
                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage - 1}">Prec</a>
                    </li>
                `);

                // Calcola il range di pagine da mostrare
                var startPage = Math.max(1, currentPage - 2);
                var endPage = Math.min(totalPages, startPage + 4);
                if (endPage - startPage < 4) {
                    startPage = Math.max(1, endPage - 4);
                }

                // Pulsanti delle pagine
                for (var i = startPage; i <= endPage; i++) {
                    container.append(`
                        <li class="page-item ${i === currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `);
                }

                // Pulsante "Successivo"
                container.append(`
                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" data-page="${currentPage + 1}">Succ</a>
                    </li>
                `);

                // Gestione dei click sui pulsanti
                container.find('.page-link').click(function(e) {
                    e.preventDefault();
                    var newPage = $(this).data('page');
                    if (newPage >= 1 && newPage <= totalPages) {
                        callback(newPage);
                    }
                });
            }

            @if (!string.IsNullOrEmpty(ViewBag.SearchContatto))
            {
                <text>
                // Grafici per le statistiche del contatto
                const contattoGiornoData = {
                    labels: @Html.Raw(Json.Serialize(Model.ChiamatePerGiorno.Keys)),
                    datasets: [{
                        label: 'Numero Chiamate',
                        data: @Html.Raw(Json.Serialize(Model.ChiamatePerGiorno.Values)),
                        borderColor: '#4e73df',
                        backgroundColor: 'rgba(78, 115, 223, 0.1)',
                        fill: true
                    }]
                };

                const contattoOraData = {
                    labels: @Html.Raw(Json.Serialize(Model.ChiamatePerOra.Keys)),
                    datasets: [{
                        label: 'Numero Chiamate',
                        data: @Html.Raw(Json.Serialize(Model.ChiamatePerOra.Values)),
                        borderColor: '#1cc88a',
                        backgroundColor: 'rgba(28, 200, 138, 0.1)',
                        fill: true
                    }]
                };

                new Chart(
                    document.getElementById('contattoGiornoChart'),
                    {
                        type: 'line',
                        data: contattoGiornoData,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1
                                    }
                                }
                            }
                        }
                    }
                );

                new Chart(
                    document.getElementById('contattoOraChart'),
                    {
                        type: 'line',
                        data: contattoOraData,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks: {
                                        stepSize: 1
                                    }
                                }
                            }
                        }
                    }
                );
                </text>
            }

            // Funzione per gestire il click sulle intestazioni delle colonne
            function handleSort(tableId, field) {
                var currentSort = tableId === 'topChiamanti' ? currentChiamantiSort : currentChiamatiSort;
                
                // Se si clicca sulla stessa colonna, inverte la direzione
                if (currentSort.field === field) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    // Se si clicca su una nuova colonna, imposta la direzione predefinita a 'asc'
                    currentSort.field = field;
                    currentSort.direction = 'asc';
                }

                // Aggiorna le icone di ordinamento
                $(`#${tableId} th.sortable`).removeClass('asc desc');
                $(`#${tableId} th[data-sort="${field}"]`).addClass(currentSort.direction);

                // Aggiorna i dati
                if (tableId === 'topChiamanti') {
                    updateTopChiamanti(1);
                } else {
                    updateTopChiamati(1);
                }
            }

            // Inizializza gli eventi di ordinamento
            $(document).ready(function() {
                // Aggiungi gli eventi click alle intestazioni delle colonne
                $('#topChiamanti th.sortable').click(function() {
                    handleSort('topChiamanti', $(this).data('sort'));
                });

                $('#topChiamati th.sortable').click(function() {
                    handleSort('topChiamati', $(this).data('sort'));
                });

                // Imposta l'ordinamento iniziale
                $('#topChiamanti th[data-sort="numeroChiamate"]').addClass('desc');
                $('#topChiamati th[data-sort="numeroChiamate"]').addClass('desc');
            });

            // Aggiorna l'URL di esportazione quando cambiano i filtri
            function updateExportUrl() {
                var dateFrom = $('#dateFrom').val();
                var dateTo = $('#dateTo').val();
                var includeInterni = $('#includeInterni').val();
                var comune = $('#comune').val();
                var searchContatto = $('#searchContatto').val();

                // Se searchContatto contiene il separatore "|", estrai solo la parte del numero per l'export
                var searchContattoForExport = searchContatto;
                if (searchContatto && searchContatto.includes('|')) {
                    searchContattoForExport = searchContatto.split('|')[0];
                }

                var exportUrl = '@Url.Action("ExportStatistics", "Home")' + '?' + $.param({
                    dateFrom: dateFrom,
                    dateTo: dateTo,
                    includeInterni: includeInterni,
                    comune: comune,
                    searchContatto: searchContattoForExport
                });

                $('#exportButton').attr('href', exportUrl);
            }

            // Aggiorna l'URL quando cambiano i filtri
            $('#dateFrom, #dateTo, #includeInterni, #comune, #searchContatto').on('change', updateExportUrl);

            function updateTopChiamantiPerLocazione(page = 1) {
                var count = $('#topChiamantiLocazioneCount').val();
                var searchContatto = '@ViewBag.SearchContatto';
                var dateFrom = '@ViewBag.DateFrom';
                var dateTo = '@ViewBag.DateTo';
                var comune = '@ViewBag.SelectedComune';
                var includeInterni = '@ViewBag.IncludeInterni';

                // Se searchContatto contiene il separatore "|", estrai solo la parte del numero
                if (searchContatto && searchContatto.includes('|')) {
                    searchContatto = searchContatto.split('|')[0];
                }

                // Se count è 0, significa "Tutti"
                if (count === "0") {
                    count = "999999"; // Un numero molto grande per ottenere tutti i risultati
                }

                $.get('@Url.Action("GetTopChiamantiPerLocazione")', {
                    searchContatto: searchContatto,
                    count: count,
                    page: page,
                    dateFrom: dateFrom,
                    dateTo: dateTo,
                    comune: comune,
                    includeInterni: includeInterni,
                    sortField: currentChiamantiLocazioneSort.field,
                    sortDirection: currentChiamantiLocazioneSort.direction
                })
                .done(function(response) {
                    if (response.error) {
                        console.error('Errore:', response.error);
                        return;
                    }

                    var tbody = $('#topChiamantiLocazioneBody');
                    tbody.empty();
                    
                    if (response.data && Array.isArray(response.data)) {
                        response.data.forEach(function(chiamante) {
                            tbody.append(`
                                <tr>
                                    <td>${chiamante.numero || ''}</td>
                                    <td class="ragione-sociale">${chiamante.ragioneSociale || ''}</td>
                                    <td>${chiamante.locazione || ''}</td>
                                    <td>${chiamante.numeroChiamate || 0}</td>
                                    <td>${formatDuration(chiamante.durataTotale || 0)}</td>
                                    <td>${formatDuration(chiamante.durataMedia || 0)}</td>
                                </tr>
                            `);
                        });

                        // Aggiorna la paginazione
                        updatePagination('topChiamantiLocazionePagination', response.totalPages || 1, page, function(newPage) {
                            currentChiamantiLocazionePage = newPage;
                            updateTopChiamantiPerLocazione(newPage);
                        });
                    } else {
                        console.error('Formato risposta non valido:', response);
                    }
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.error('Errore nella richiesta:', textStatus, errorThrown);
                });
            }

            function updateTopChiamatiPerLocazione(page = 1) {
                var count = $('#topChiamatiLocazioneCount').val();
                var searchContatto = '@ViewBag.SearchContatto';
                var dateFrom = '@ViewBag.DateFrom';
                var dateTo = '@ViewBag.DateTo';
                var comune = '@ViewBag.SelectedComune';
                var includeInterni = '@ViewBag.IncludeInterni';

                // Se searchContatto contiene il separatore "|", estrai solo la parte del numero
                if (searchContatto && searchContatto.includes('|')) {
                    searchContatto = searchContatto.split('|')[0];
                }

                // Se count è 0, significa "Tutti"
                if (count === "0") {
                    count = "999999"; // Un numero molto grande per ottenere tutti i risultati
                }

                $.get('@Url.Action("GetTopChiamatiPerLocazione")', {
                    searchContatto: searchContatto,
                    count: count,
                    page: page,
                    dateFrom: dateFrom,
                    dateTo: dateTo,
                    comune: comune,
                    includeInterni: includeInterni,
                    sortField: currentChiamatiLocazioneSort.field,
                    sortDirection: currentChiamatiLocazioneSort.direction
                })
                .done(function(response) {
                    if (response.error) {
                        console.error('Errore:', response.error);
                        return;
                    }

                    var tbody = $('#topChiamatiLocazioneBody');
                    tbody.empty();
                    
                    if (response.data && Array.isArray(response.data)) {
                        response.data.forEach(function(chiamato) {
                            tbody.append(`
                                <tr>
                                    <td>${chiamato.numero || ''}</td>
                                    <td class="ragione-sociale">${chiamato.ragioneSociale || ''}</td>
                                    <td>${chiamato.locazione || ''}</td>
                                    <td>${chiamato.numeroChiamate || 0}</td>
                                    <td>${formatDuration(chiamato.durataTotale || 0)}</td>
                                    <td>${formatDuration(chiamato.durataMedia || 0)}</td>
                                </tr>
                            `);
                        });

                        // Aggiorna la paginazione
                        updatePagination('topChiamatiLocazionePagination', response.totalPages || 1, page, function(newPage) {
                            currentChiamatiLocazionePage = newPage;
                            updateTopChiamatiPerLocazione(newPage);
                        });
                    } else {
                        console.error('Formato risposta non valido:', response);
                    }
                })
                .fail(function(jqXHR, textStatus, errorThrown) {
                    console.error('Errore nella richiesta:', textStatus, errorThrown);
                });
            }

            // Gestione del cambio del numero di risultati per le nuove tabelle
            $('#topChiamantiLocazioneCount').change(function() {
                currentChiamantiLocazionePage = 1;
                updateTopChiamantiPerLocazione(1);
            });

            $('#topChiamatiLocazioneCount').change(function() {
                currentChiamatiLocazionePage = 1;
                updateTopChiamatiPerLocazione(1);
            });

            // Inizializza le tabelle
            updateTopChiamanti(1);
            updateTopChiamati(1);
            updateTopChiamantiPerLocazione(1);
            updateTopChiamatiPerLocazione(1);

            // Funzione per formattare la durata
            function formatDuration(seconds) {
                var hours = Math.floor(seconds / 3600);
                var minutes = Math.floor((seconds % 3600) / 60);
                var secs = Math.floor(seconds % 60);
                
                var parts = [];
                if (hours > 0) parts.push(hours + 'h');
                if (minutes > 0) parts.push(minutes + 'm');
                if (secs > 0 || parts.length === 0) parts.push(secs + 's');
                
                return parts.join(' ');
            }
        });
    </script>
}

@functions {
    public string FormatDuration(double seconds)
    {
        if (seconds < 60)
        {
            return $"{seconds:N0} sec";
        }
        
        int totalSeconds = (int)seconds;
        int hours = totalSeconds / 3600;
        int minutes = (totalSeconds % 3600) / 60;
        int remainingSeconds = totalSeconds % 60;
        
        if (hours > 0)
        {
            return $"{hours}h {minutes}m {remainingSeconds}s";
        }
        else if (minutes > 0)
        {
            return $"{minutes}m {remainingSeconds}s";
        }
        else
        {
            return $"{remainingSeconds}s";
        }
    }
} 